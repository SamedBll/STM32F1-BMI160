
Otonom_Seyler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004698  08004698  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004698  08004698  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004698  08004698  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800469c  0800469c  0001469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000010  080046ac  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080046ac  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c436  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d07  00000000  00000000  0002c46b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0002e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  0002ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fcd  00000000  00000000  0002fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc6a  00000000  00000000  00046cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fa7  00000000  00000000  00054927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc8ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c6c  00000000  00000000  000dc920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004658 	.word	0x08004658

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004658 	.word	0x08004658

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, RxData, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	4910      	ldr	r1, [pc, #64]	; (8000768 <HAL_UART_RxCpltCallback+0x4c>)
 8000728:	4810      	ldr	r0, [pc, #64]	; (800076c <HAL_UART_RxCpltCallback+0x50>)
 800072a:	f003 fb62 	bl	8003df2 <HAL_UART_Receive_IT>
  if(RxData[0] == '1'){
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_UART_RxCpltCallback+0x4c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b31      	cmp	r3, #49	; 0x31
 8000734:	d108      	bne.n	8000748 <HAL_UART_RxCpltCallback+0x2c>
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,75); //Second motor 75% voltage
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_UART_RxCpltCallback+0x54>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	224b      	movs	r2, #75	; 0x4b
 800073c:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,75);
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_UART_RxCpltCallback+0x54>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	224b      	movs	r2, #75	; 0x4b
 8000744:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else if(RxData[0] == '0'){
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0); //Second motor 75% voltage
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
  }
}
 8000746:	e00b      	b.n	8000760 <HAL_UART_RxCpltCallback+0x44>
  else if(RxData[0] == '0'){
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_UART_RxCpltCallback+0x4c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b30      	cmp	r3, #48	; 0x30
 800074e:	d107      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x44>
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0); //Second motor 75% voltage
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <HAL_UART_RxCpltCallback+0x54>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_UART_RxCpltCallback+0x54>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2200      	movs	r2, #0
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000178 	.word	0x20000178
 800076c:	20000114 	.word	0x20000114
 8000770:	200000cc 	.word	0x200000cc

08000774 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit_IT(&huart1, imu_data, sizeof (imu_data));
 800077c:	2238      	movs	r2, #56	; 0x38
 800077e:	4904      	ldr	r1, [pc, #16]	; (8000790 <HAL_UART_TxCpltCallback+0x1c>)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <HAL_UART_TxCpltCallback+0x20>)
 8000782:	f003 faf2 	bl	8003d6a <HAL_UART_Transmit_IT>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001b8 	.word	0x200001b8
 8000794:	20000114 	.word	0x20000114

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b5b0      	push	{r4, r5, r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fe35 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f983 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a6:	f000 faf7 	bl	8000d98 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007aa:	f000 f9c5 	bl	8000b38 <MX_SPI1_Init>
  MX_TIM1_Init();
 80007ae:	f000 f9f9 	bl	8000ba4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80007b2:	f000 fa47 	bl	8000c44 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 fac5 	bl	8000d44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80007ba:	48ab      	ldr	r0, [pc, #684]	; (8000a68 <main+0x2d0>)
 80007bc:	f002 fcc0 	bl	8003140 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);               //Initialize stm32 timer 3
 80007c0:	48aa      	ldr	r0, [pc, #680]	; (8000a6c <main+0x2d4>)
 80007c2:	f002 fcbd 	bl	8003140 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);  //PB0 Start pwm second motor 100% duty cycle
 80007c6:	2108      	movs	r1, #8
 80007c8:	48a8      	ldr	r0, [pc, #672]	; (8000a6c <main+0x2d4>)
 80007ca:	f002 fd5b 	bl	8003284 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80007ce:	210c      	movs	r1, #12
 80007d0:	48a6      	ldr	r0, [pc, #664]	; (8000a6c <main+0x2d4>)
 80007d2:	f002 fd57 	bl	8003284 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);   // Start first motor clock wise rotation
 80007d6:	2201      	movs	r2, #1
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	48a5      	ldr	r0, [pc, #660]	; (8000a70 <main+0x2d8>)
 80007dc:	f001 fa9a 	bl	8001d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	48a2      	ldr	r0, [pc, #648]	; (8000a70 <main+0x2d8>)
 80007e6:	f001 fa95 	bl	8001d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);   //Start second motor clock wise rotation
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	48a0      	ldr	r0, [pc, #640]	; (8000a70 <main+0x2d8>)
 80007f0:	f001 fa90 	bl	8001d14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	489d      	ldr	r0, [pc, #628]	; (8000a70 <main+0x2d8>)
 80007fa:	f001 fa8b 	bl	8001d14 <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT (&huart1, RxData, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	499c      	ldr	r1, [pc, #624]	; (8000a74 <main+0x2dc>)
 8000802:	489d      	ldr	r0, [pc, #628]	; (8000a78 <main+0x2e0>)
 8000804:	f003 faf5 	bl	8003df2 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, imu_data, sizeof (imu_data));
 8000808:	2238      	movs	r2, #56	; 0x38
 800080a:	499c      	ldr	r1, [pc, #624]	; (8000a7c <main+0x2e4>)
 800080c:	489a      	ldr	r0, [pc, #616]	; (8000a78 <main+0x2e0>)
 800080e:	f003 faac 	bl	8003d6a <HAL_UART_Transmit_IT>

  while(chipID()!=1){}
 8000812:	bf00      	nop
 8000814:	f000 fb2a 	bl	8000e6c <chipID>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d1fa      	bne.n	8000814 <main+0x7c>
  HAL_Delay(100);
 800081e:	2064      	movs	r0, #100	; 0x64
 8000820:	f000 fe56 	bl	80014d0 <HAL_Delay>
  BMI160Init();
 8000824:	f000 fbb6 	bl	8000f94 <BMI160Init>
  HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	; 0x64
 800082a:	f000 fe51 	bl	80014d0 <HAL_Delay>
//
//  int8_t pmu_status = BMI160Read_Return(0x83,1,100);
//  HAL_Delay(100);

  //------------------Error Check------------------//
  uint8_t err = (uint8_t)BMI160Read_Return(0x82,1,100);
 800082e:	2264      	movs	r2, #100	; 0x64
 8000830:	2101      	movs	r1, #1
 8000832:	2082      	movs	r0, #130	; 0x82
 8000834:	f000 fb42 	bl	8000ebc <BMI160Read_Return>
 8000838:	4603      	mov	r3, r0
 800083a:	70fb      	strb	r3, [r7, #3]
  HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	f000 fe47 	bl	80014d0 <HAL_Delay>

  foc();
 8000842:	f000 fbeb 	bl	800101c <foc>
	  //data0[2]= gyr_z
	  //data0[3]= acc_x
	  //data0[4]= acc_y
	  //data0[5]= acc_z
	  //data0[6]= timestamp
	  BMI160_GetData(0x8C, &vol_data0,7,10);
 8000846:	230a      	movs	r3, #10
 8000848:	2207      	movs	r2, #7
 800084a:	498d      	ldr	r1, [pc, #564]	; (8000a80 <main+0x2e8>)
 800084c:	208c      	movs	r0, #140	; 0x8c
 800084e:	f000 fb5d 	bl	8000f0c <BMI160_GetData>
	  for(size_t i = 0; i<7; ++i){
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e014      	b.n	8000882 <main+0xea>
			data0[i] = (vol_data0[i][1]<<8) | (vol_data0[i][0]);
 8000858:	4a89      	ldr	r2, [pc, #548]	; (8000a80 <main+0x2e8>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	785b      	ldrb	r3, [r3, #1]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	4986      	ldr	r1, [pc, #536]	; (8000a80 <main+0x2e8>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b219      	sxth	r1, r3
 8000874:	4a83      	ldr	r2, [pc, #524]	; (8000a84 <main+0x2ec>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(size_t i = 0; i<7; ++i){
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2b06      	cmp	r3, #6
 8000886:	d9e7      	bls.n	8000858 <main+0xc0>
	  }

	  for(size_t i = 0; i<3; ++i){
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	e016      	b.n	80008bc <main+0x124>
	  		imu_data[i] = (250.0/65536.0)*data0[i];
 800088e:	4a7d      	ldr	r2, [pc, #500]	; (8000a84 <main+0x2ec>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fed6 	bl	8000648 <__aeabi_i2d>
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	4b79      	ldr	r3, [pc, #484]	; (8000a88 <main+0x2f0>)
 80008a2:	f7ff fc55 	bl	8000150 <__aeabi_dmul>
 80008a6:	4602      	mov	r2, r0
 80008a8:	460b      	mov	r3, r1
 80008aa:	4874      	ldr	r0, [pc, #464]	; (8000a7c <main+0x2e4>)
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	00c9      	lsls	r1, r1, #3
 80008b0:	4401      	add	r1, r0
 80008b2:	e9c1 2300 	strd	r2, r3, [r1]
	  for(size_t i = 0; i<3; ++i){
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d9e5      	bls.n	800088e <main+0xf6>
	  }
	  for(size_t i = 3; i<6; ++i){
 80008c2:	2303      	movs	r3, #3
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e017      	b.n	80008f8 <main+0x160>
	  	  	imu_data[i] = (32.0/65536.0)*data0[i];
 80008c8:	4a6e      	ldr	r2, [pc, #440]	; (8000a84 <main+0x2ec>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff feb9 	bl	8000648 <__aeabi_i2d>
 80008d6:	f04f 0200 	mov.w	r2, #0
 80008da:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80008de:	f7ff fc37 	bl	8000150 <__aeabi_dmul>
 80008e2:	4602      	mov	r2, r0
 80008e4:	460b      	mov	r3, r1
 80008e6:	4865      	ldr	r0, [pc, #404]	; (8000a7c <main+0x2e4>)
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	00c9      	lsls	r1, r1, #3
 80008ec:	4401      	add	r1, r0
 80008ee:	e9c1 2300 	strd	r2, r3, [r1]
	  for(size_t i = 3; i<6; ++i){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3301      	adds	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	d9e4      	bls.n	80008c8 <main+0x130>
	  }
	  gyr_x = (250.0/65536.0)*data0[0];
 80008fe:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <main+0x2ec>)
 8000900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe9f 	bl	8000648 <__aeabi_i2d>
 800090a:	f04f 0200 	mov.w	r2, #0
 800090e:	4b5e      	ldr	r3, [pc, #376]	; (8000a88 <main+0x2f0>)
 8000910:	f7ff fc1e 	bl	8000150 <__aeabi_dmul>
 8000914:	4602      	mov	r2, r0
 8000916:	460b      	mov	r3, r1
 8000918:	495c      	ldr	r1, [pc, #368]	; (8000a8c <main+0x2f4>)
 800091a:	e9c1 2300 	strd	r2, r3, [r1]
	  gyr_y = (250.0/65536.0)*data0[1];
 800091e:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <main+0x2ec>)
 8000920:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe8f 	bl	8000648 <__aeabi_i2d>
 800092a:	f04f 0200 	mov.w	r2, #0
 800092e:	4b56      	ldr	r3, [pc, #344]	; (8000a88 <main+0x2f0>)
 8000930:	f7ff fc0e 	bl	8000150 <__aeabi_dmul>
 8000934:	4602      	mov	r2, r0
 8000936:	460b      	mov	r3, r1
 8000938:	4955      	ldr	r1, [pc, #340]	; (8000a90 <main+0x2f8>)
 800093a:	e9c1 2300 	strd	r2, r3, [r1]
	  gyr_z = (250.0/65536.0)*data0[2];
 800093e:	4b51      	ldr	r3, [pc, #324]	; (8000a84 <main+0x2ec>)
 8000940:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe7f 	bl	8000648 <__aeabi_i2d>
 800094a:	f04f 0200 	mov.w	r2, #0
 800094e:	4b4e      	ldr	r3, [pc, #312]	; (8000a88 <main+0x2f0>)
 8000950:	f7ff fbfe 	bl	8000150 <__aeabi_dmul>
 8000954:	4602      	mov	r2, r0
 8000956:	460b      	mov	r3, r1
 8000958:	494e      	ldr	r1, [pc, #312]	; (8000a94 <main+0x2fc>)
 800095a:	e9c1 2300 	strd	r2, r3, [r1]
	  acc_x = (32.0/65536.0)*data0[3];
 800095e:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <main+0x2ec>)
 8000960:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe6f 	bl	8000648 <__aeabi_i2d>
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8000972:	f7ff fbed 	bl	8000150 <__aeabi_dmul>
 8000976:	4602      	mov	r2, r0
 8000978:	460b      	mov	r3, r1
 800097a:	4947      	ldr	r1, [pc, #284]	; (8000a98 <main+0x300>)
 800097c:	e9c1 2300 	strd	r2, r3, [r1]
	  acc_y = (32.0/65536.0)*data0[4];
 8000980:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <main+0x2ec>)
 8000982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe5e 	bl	8000648 <__aeabi_i2d>
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8000994:	f7ff fbdc 	bl	8000150 <__aeabi_dmul>
 8000998:	4602      	mov	r2, r0
 800099a:	460b      	mov	r3, r1
 800099c:	493f      	ldr	r1, [pc, #252]	; (8000a9c <main+0x304>)
 800099e:	e9c1 2300 	strd	r2, r3, [r1]
	  acc_z = (32.0/65536.0)*data0[5];
 80009a2:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <main+0x2ec>)
 80009a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fe4d 	bl	8000648 <__aeabi_i2d>
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80009b6:	f7ff fbcb 	bl	8000150 <__aeabi_dmul>
 80009ba:	4602      	mov	r2, r0
 80009bc:	460b      	mov	r3, r1
 80009be:	4938      	ldr	r1, [pc, #224]	; (8000aa0 <main+0x308>)
 80009c0:	e9c1 2300 	strd	r2, r3, [r1]
	  timestamp = data0[6];
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <main+0x2ec>)
 80009c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <main+0x30c>)
 80009ce:	801a      	strh	r2, [r3, #0]
	  if(timestamp - old_timestamp >0){
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <main+0x30c>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <main+0x310>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd17      	ble.n	8000a10 <main+0x278>
		  //delta_time = timestamp-old_timestamp;
		  imu_data[6] = (double)timestamp-old_timestamp;
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <main+0x30c>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe1f 	bl	8000628 <__aeabi_ui2d>
 80009ea:	4604      	mov	r4, r0
 80009ec:	460d      	mov	r5, r1
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <main+0x310>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe28 	bl	8000648 <__aeabi_i2d>
 80009f8:	4602      	mov	r2, r0
 80009fa:	460b      	mov	r3, r1
 80009fc:	4620      	mov	r0, r4
 80009fe:	4629      	mov	r1, r5
 8000a00:	f7ff fcd4 	bl	80003ac <__aeabi_dsub>
 8000a04:	4602      	mov	r2, r0
 8000a06:	460b      	mov	r3, r1
 8000a08:	491c      	ldr	r1, [pc, #112]	; (8000a7c <main+0x2e4>)
 8000a0a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8000a0e:	e01f      	b.n	8000a50 <main+0x2b8>
	  }else{
		  //delta_time = (65535-old_timestamp)+timestamp;
		  imu_data[6] =(double)(65535.0-old_timestamp)+timestamp;
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <main+0x310>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fe17 	bl	8000648 <__aeabi_i2d>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	a110      	add	r1, pc, #64	; (adr r1, 8000a60 <main+0x2c8>)
 8000a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a24:	f7ff fcc2 	bl	80003ac <__aeabi_dsub>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	4614      	mov	r4, r2
 8000a2e:	461d      	mov	r5, r3
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <main+0x30c>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fe07 	bl	8000648 <__aeabi_i2d>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4620      	mov	r0, r4
 8000a40:	4629      	mov	r1, r5
 8000a42:	f7ff fcb5 	bl	80003b0 <__adddf3>
 8000a46:	4602      	mov	r2, r0
 8000a48:	460b      	mov	r3, r1
 8000a4a:	490c      	ldr	r1, [pc, #48]	; (8000a7c <main+0x2e4>)
 8000a4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  }
	  old_timestamp = timestamp;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <main+0x30c>)
 8000a52:	881a      	ldrh	r2, [r3, #0]
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <main+0x310>)
 8000a56:	801a      	strh	r2, [r3, #0]
	  BMI160_GetData(0x8C, &vol_data0,7,10);
 8000a58:	e6f5      	b.n	8000846 <main+0xae>
 8000a5a:	bf00      	nop
 8000a5c:	f3af 8000 	nop.w
 8000a60:	00000000 	.word	0x00000000
 8000a64:	40efffe0 	.word	0x40efffe0
 8000a68:	20000084 	.word	0x20000084
 8000a6c:	200000cc 	.word	0x200000cc
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	20000178 	.word	0x20000178
 8000a78:	20000114 	.word	0x20000114
 8000a7c:	200001b8 	.word	0x200001b8
 8000a80:	20000158 	.word	0x20000158
 8000a84:	20000168 	.word	0x20000168
 8000a88:	3f6f4000 	.word	0x3f6f4000
 8000a8c:	20000180 	.word	0x20000180
 8000a90:	20000188 	.word	0x20000188
 8000a94:	20000190 	.word	0x20000190
 8000a98:	20000198 	.word	0x20000198
 8000a9c:	200001a0 	.word	0x200001a0
 8000aa0:	200001a8 	.word	0x200001a8
 8000aa4:	200001b0 	.word	0x200001b0
 8000aa8:	200001b2 	.word	0x200001b2

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b090      	sub	sp, #64	; 0x40
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0318 	add.w	r3, r7, #24
 8000ab6:	2228      	movs	r2, #40	; 0x28
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fdc4 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000aea:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 f925 	bl	8001d44 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b00:	f000 facd 	bl	800109e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fb92 	bl	8002248 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b2a:	f000 fab8 	bl	800109e <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3740      	adds	r7, #64	; 0x40
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_SPI1_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b8a:	f001 fcf5 	bl	8002578 <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fa83 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000002c 	.word	0x2000002c
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <MX_TIM1_Init+0x9c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40-1;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000bc8:	2227      	movs	r2, #39	; 0x27
 8000bca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000bd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000bee:	f002 fa57 	bl	80030a0 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 fa51 	bl	800109e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000c0a:	f002 fc9b 	bl	8003544 <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c14:	f000 fa43 	bl	800109e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_TIM1_Init+0x98>)
 8000c26:	f002 fff5 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c30:	f000 fa35 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000084 	.word	0x20000084
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c74:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000c76:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <MX_TIM4_Init+0xfc>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 40-1;
 8000c7a:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000c7c:	2227      	movs	r2, #39	; 0x27
 8000c7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000c88:	2263      	movs	r2, #99	; 0x63
 8000c8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c98:	4828      	ldr	r0, [pc, #160]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000c9a:	f002 fa01 	bl	80030a0 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000ca4:	f000 f9fb 	bl	800109e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4821      	ldr	r0, [pc, #132]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000cb6:	f002 fc45 	bl	8003544 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000cc0:	f000 f9ed 	bl	800109e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cc4:	481d      	ldr	r0, [pc, #116]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000cc6:	f002 fa85 	bl	80031d4 <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000cd0:	f000 f9e5 	bl	800109e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000ce4:	f002 ff96 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000cee:	f000 f9d6 	bl	800109e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2208      	movs	r2, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000d0a:	f002 fb5d 	bl	80033c8 <HAL_TIM_PWM_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000d14:	f000 f9c3 	bl	800109e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000d20:	f002 fb52 	bl	80033c8 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000d2a:	f000 f9b8 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_TIM4_Init+0xf8>)
 8000d30:	f000 fa86 	bl	8001240 <HAL_TIM_MspPostInit>

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000cc 	.word	0x200000cc
 8000d40:	40000800 	.word	0x40000800

08000d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_USART1_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d50:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f002 ffa8 	bl	8003cd0 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f000 f98a 	bl	800109e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000114 	.word	0x20000114
 8000d94:	40013800 	.word	0x40013800

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_GPIO_Init+0x8c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	21f0      	movs	r1, #240	; 0xf0
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <MX_GPIO_Init+0x90>)
 8000dfa:	f000 ff8b 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dfe:	23f0      	movs	r3, #240	; 0xf0
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_GPIO_Init+0x90>)
 8000e16:	f000 fd3d 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <idleReadSPI>:

/* USER CODE BEGIN 4 */
void idleReadSPI(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
	//BMI160'a SPI başlatıldığını haber vermek için, NSS pinini low-high toggle yapılmalı
	uint8_t idle_address[1] = {0xFF};
 8000e32:	23ff      	movs	r3, #255	; 0xff
 8000e34:	713b      	strb	r3, [r7, #4]
	uint8_t idle_reply[1] = {0};
 8000e36:	2300      	movs	r3, #0
 8000e38:	703b      	strb	r3, [r7, #0]
	HAL_SPI_Init(&hspi1);
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <idleReadSPI+0x3c>)
 8000e3c:	f001 fb9c 	bl	8002578 <HAL_SPI_Init>
	HAL_SPI_Transmit(&hspi1, idle_address, 1, 100);
 8000e40:	1d39      	adds	r1, r7, #4
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	2201      	movs	r2, #1
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <idleReadSPI+0x3c>)
 8000e48:	f001 fc42 	bl	80026d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, idle_reply,1,100);
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	2364      	movs	r3, #100	; 0x64
 8000e50:	2201      	movs	r2, #1
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <idleReadSPI+0x3c>)
 8000e54:	f001 fd78 	bl	8002948 <HAL_SPI_Receive>
	HAL_SPI_DeInit(&hspi1);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <idleReadSPI+0x3c>)
 8000e5a:	f001 fc11 	bl	8002680 <HAL_SPI_DeInit>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000002c 	.word	0x2000002c

08000e6c <chipID>:

int8_t chipID(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	//BMI160 Basic Kontrol
	idleReadSPI();
 8000e72:	f7ff ffdb 	bl	8000e2c <idleReadSPI>
	uint8_t address = 0x80;
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	71fb      	strb	r3, [r7, #7]
	uint8_t reply = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Init(&hspi1);
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <chipID+0x4c>)
 8000e80:	f001 fb7a 	bl	8002578 <HAL_SPI_Init>
	HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 8000e84:	1df9      	adds	r1, r7, #7
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	2201      	movs	r2, #1
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <chipID+0x4c>)
 8000e8c:	f001 fc20 	bl	80026d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &reply,1,100);
 8000e90:	1db9      	adds	r1, r7, #6
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	2201      	movs	r2, #1
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <chipID+0x4c>)
 8000e98:	f001 fd56 	bl	8002948 <HAL_SPI_Receive>
	HAL_SPI_DeInit(&hspi1);
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <chipID+0x4c>)
 8000e9e:	f001 fbef 	bl	8002680 <HAL_SPI_DeInit>
	return ((uint8_t)reply==0xD1) ? 1 : 0;
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	2bd1      	cmp	r3, #209	; 0xd1
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	b25b      	sxtb	r3, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000002c 	.word	0x2000002c

08000ebc <BMI160Read_Return>:

int8_t BMI160Read_Return(uint8_t address, size_t size, int timeout){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]
	uint8_t reply = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Init(&hspi1);
 8000ece:	480e      	ldr	r0, [pc, #56]	; (8000f08 <BMI160Read_Return+0x4c>)
 8000ed0:	f001 fb52 	bl	8002578 <HAL_SPI_Init>
	HAL_SPI_Transmit(&hspi1, &address, size, timeout);
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f107 010f 	add.w	r1, r7, #15
 8000ede:	480a      	ldr	r0, [pc, #40]	; (8000f08 <BMI160Read_Return+0x4c>)
 8000ee0:	f001 fbf6 	bl	80026d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &reply, size, timeout);
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f107 0117 	add.w	r1, r7, #23
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <BMI160Read_Return+0x4c>)
 8000ef0:	f001 fd2a 	bl	8002948 <HAL_SPI_Receive>
	HAL_SPI_DeInit(&hspi1);
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <BMI160Read_Return+0x4c>)
 8000ef6:	f001 fbc3 	bl	8002680 <HAL_SPI_DeInit>
	return reply;
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	b25b      	sxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000002c 	.word	0x2000002c

08000f0c <BMI160_GetData>:


void BMI160_GetData(uint8_t address, uint8_t *vol_data[][2], size_t size, int timeout){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	4603      	mov	r3, r0
 8000f1a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Init(&hspi1);
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <BMI160_GetData+0x44>)
 8000f1e:	f001 fb2b 	bl	8002578 <HAL_SPI_Init>
	HAL_SPI_Transmit(&hspi1, &address, 1, timeout);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f107 010f 	add.w	r1, r7, #15
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4809      	ldr	r0, [pc, #36]	; (8000f50 <BMI160_GetData+0x44>)
 8000f2c:	f001 fbd0 	bl	80026d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, vol_data, size*2, timeout);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <BMI160_GetData+0x44>)
 8000f3e:	f001 fd03 	bl	8002948 <HAL_SPI_Receive>
	HAL_SPI_DeInit(&hspi1);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <BMI160_GetData+0x44>)
 8000f44:	f001 fb9c 	bl	8002680 <HAL_SPI_DeInit>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000002c 	.word	0x2000002c

08000f54 <BMI160Write>:


void BMI160Write(uint8_t address, uint8_t pValue,  int timeout){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	603a      	str	r2, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	460b      	mov	r3, r1
 8000f62:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Init(&hspi1);
 8000f64:	480a      	ldr	r0, [pc, #40]	; (8000f90 <BMI160Write+0x3c>)
 8000f66:	f001 fb07 	bl	8002578 <HAL_SPI_Init>
	HAL_SPI_Transmit(&hspi1, &address, 1, timeout);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	1df9      	adds	r1, r7, #7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <BMI160Write+0x3c>)
 8000f72:	f001 fbad 	bl	80026d0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &pValue, 1, timeout);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	1db9      	adds	r1, r7, #6
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <BMI160Write+0x3c>)
 8000f7e:	f001 fba7 	bl	80026d0 <HAL_SPI_Transmit>
	HAL_SPI_DeInit(&hspi1);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <BMI160Write+0x3c>)
 8000f84:	f001 fb7c 	bl	8002680 <HAL_SPI_DeInit>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000002c 	.word	0x2000002c

08000f94 <BMI160Init>:

void BMI160Init(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	BMI160Write(0X4C,0x00,100); //mag_manuel_en = 0
 8000f98:	2264      	movs	r2, #100	; 0x64
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	204c      	movs	r0, #76	; 0x4c
 8000f9e:	f7ff ffd9 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f000 fa94 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x7E,0b00010001,100); //acc_pmu_status = normal
 8000fa8:	2264      	movs	r2, #100	; 0x64
 8000faa:	2111      	movs	r1, #17
 8000fac:	207e      	movs	r0, #126	; 0x7e
 8000fae:	f7ff ffd1 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	; 0x64
 8000fb4:	f000 fa8c 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x7E,0b00010101,100); //gyr_pmu_status = normal
 8000fb8:	2264      	movs	r2, #100	; 0x64
 8000fba:	2115      	movs	r1, #21
 8000fbc:	207e      	movs	r0, #126	; 0x7e
 8000fbe:	f7ff ffc9 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f000 fa84 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x7E,0b00011000,100); //mag_pmu_status = suspend
 8000fc8:	2264      	movs	r2, #100	; 0x64
 8000fca:	2118      	movs	r1, #24
 8000fcc:	207e      	movs	r0, #126	; 0x7e
 8000fce:	f7ff ffc1 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8000fd2:	2064      	movs	r0, #100	; 0x64
 8000fd4:	f000 fa7c 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x40,0b00001100,100); //acc_conf = OSR4, ODR 1600HZ -> Bu kısım değiştirilip gözlem yapılabilir
 8000fd8:	2264      	movs	r2, #100	; 0x64
 8000fda:	210c      	movs	r1, #12
 8000fdc:	2040      	movs	r0, #64	; 0x40
 8000fde:	f7ff ffb9 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f000 fa74 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x41,0b00001100,100); //acc_range = ±16g range
 8000fe8:	2264      	movs	r2, #100	; 0x64
 8000fea:	210c      	movs	r1, #12
 8000fec:	2041      	movs	r0, #65	; 0x41
 8000fee:	f7ff ffb1 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8000ff2:	2064      	movs	r0, #100	; 0x64
 8000ff4:	f000 fa6c 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x42,0b00001100,100); //gyr_conf = OSR4, ODR 1600HZ -> Bu kısım değiştirilip gözlem yapılabilir
 8000ff8:	2264      	movs	r2, #100	; 0x64
 8000ffa:	210c      	movs	r1, #12
 8000ffc:	2042      	movs	r0, #66	; 0x42
 8000ffe:	f7ff ffa9 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f000 fa64 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x43,0b00000100,100); //gyr_range = ±125°/s
 8001008:	2264      	movs	r2, #100	; 0x64
 800100a:	2104      	movs	r1, #4
 800100c:	2043      	movs	r0, #67	; 0x43
 800100e:	f7ff ffa1 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8001012:	2064      	movs	r0, #100	; 0x64
 8001014:	f000 fa5c 	bl	80014d0 <HAL_Delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <foc>:

void foc(void){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001022:	2064      	movs	r0, #100	; 0x64
 8001024:	f000 fa54 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x77,0b11000000,100); //gyr_off_en = 1, acc_off_en = 1;
 8001028:	2264      	movs	r2, #100	; 0x64
 800102a:	21c0      	movs	r1, #192	; 0xc0
 800102c:	2077      	movs	r0, #119	; 0x77
 800102e:	f7ff ff91 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f000 fa4c 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x69,0b01111101,100); //foc_gyr_en = 1, foc_acc_x = 11, foc_acc_y = 11, foc_acc_z = 01
 8001038:	2264      	movs	r2, #100	; 0x64
 800103a:	217d      	movs	r1, #125	; 0x7d
 800103c:	2069      	movs	r0, #105	; 0x69
 800103e:	f7ff ff89 	bl	8000f54 <BMI160Write>
	HAL_Delay(100);
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f000 fa44 	bl	80014d0 <HAL_Delay>
	BMI160Write(0x7E,0b00000011,100); //CMD->start_foc
 8001048:	2264      	movs	r2, #100	; 0x64
 800104a:	2103      	movs	r1, #3
 800104c:	207e      	movs	r0, #126	; 0x7e
 800104e:	f7ff ff81 	bl	8000f54 <BMI160Write>
	HAL_Delay(1000);
 8001052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001056:	f000 fa3b 	bl	80014d0 <HAL_Delay>
	uint8_t status= (uint8_t)BMI160Read_Return(0x9B,1,100);
 800105a:	2264      	movs	r2, #100	; 0x64
 800105c:	2101      	movs	r1, #1
 800105e:	209b      	movs	r0, #155	; 0x9b
 8001060:	f7ff ff2c 	bl	8000ebc <BMI160Read_Return>
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f000 fa31 	bl	80014d0 <HAL_Delay>
	uint8_t foc_rdy = (1<<3);
 800106e:	2308      	movs	r3, #8
 8001070:	71bb      	strb	r3, [r7, #6]
	while((status&foc_rdy)!=0x08){
 8001072:	e009      	b.n	8001088 <foc+0x6c>
		status= (uint8_t)BMI160Read_Return(0x9B,1,100);
 8001074:	2264      	movs	r2, #100	; 0x64
 8001076:	2101      	movs	r1, #1
 8001078:	209b      	movs	r0, #155	; 0x9b
 800107a:	f7ff ff1f 	bl	8000ebc <BMI160Read_Return>
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 fa24 	bl	80014d0 <HAL_Delay>
	while((status&foc_rdy)!=0x08){
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	4013      	ands	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b08      	cmp	r3, #8
 8001092:	d1ef      	bne.n	8001074 <foc+0x58>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a2:	b672      	cpsid	i
}
 80010a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <Error_Handler+0x8>

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_MspInit+0x5c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x5c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x60>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_MspInit+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d12f      	bne.n	800118c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800115c:	23b0      	movs	r3, #176	; 0xb0
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <HAL_SPI_MspInit+0x90>)
 8001170:	f000 fb90 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_SPI_MspInit+0x90>)
 8001188:	f000 fb84 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40013000 	.word	0x40013000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800

080011a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_SPI_MspDeInit+0x30>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d109      	bne.n	80011c6 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_SPI_MspDeInit+0x34>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_SPI_MspDeInit+0x34>)
 80011b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011bc:	6193      	str	r3, [r2, #24]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80011be:	21f0      	movs	r1, #240	; 0xf0
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_SPI_MspDeInit+0x38>)
 80011c2:	f000 fceb 	bl	8001b9c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010800 	.word	0x40010800

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_TIM_Base_MspInit+0x58>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10c      	bne.n	8001208 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 80011f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011f8:	6193      	str	r3, [r2, #24]
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001206:	e010      	b.n	800122a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <HAL_TIM_Base_MspInit+0x60>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10b      	bne.n	800122a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40012c00 	.word	0x40012c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40000800 	.word	0x40000800

08001240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_TIM_MspPostInit+0x5c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d118      	bne.n	8001292 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_TIM_MspPostInit+0x60>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_TIM_MspPostInit+0x60>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_TIM_MspPostInit+0x60>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001278:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2302      	movs	r3, #2
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_TIM_MspPostInit+0x64>)
 800128e:	f000 fb01 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40000800 	.word	0x40000800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010c00 	.word	0x40010c00

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <HAL_UART_MspInit+0x9c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d139      	bne.n	800133c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a18      	ldr	r2, [pc, #96]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_UART_MspInit+0xa0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <HAL_UART_MspInit+0xa4>)
 800130e:	f000 fac1 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4809      	ldr	r0, [pc, #36]	; (800134c <HAL_UART_MspInit+0xa4>)
 8001328:	f000 fab4 	bl	8001894 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2025      	movs	r0, #37	; 0x25
 8001332:	f000 f9c8 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001336:	2025      	movs	r0, #37	; 0x25
 8001338:	f000 f9e1 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40013800 	.word	0x40013800
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f87f 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <USART1_IRQHandler+0x10>)
 80013a6:	f002 fd55 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000114 	.word	0x20000114

080013b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013e6:	f7ff ffe5 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f003 f909 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ee:	f7ff f9d3 	bl	8000798 <main>
  bx lr
 80013f2:	4770      	bx	lr
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013fc:	080046a0 	.word	0x080046a0
  ldr r2, =_sbss
 8001400:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001404:	200001f4 	.word	0x200001f4

08001408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_2_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x28>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x28>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f947 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	200f      	movs	r0, #15
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fe3e 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f95f 	bl	800171a <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f927 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000008 	.word	0x20000008
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_IncTick+0x20>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200001f0 	.word	0x200001f0

080014bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_GetTick+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	200001f0 	.word	0x200001f0

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff fff0 	bl	80014bc <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d005      	beq.n	80014f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	bf00      	nop
 80014f8:	f7ff ffe0 	bl	80014bc <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8f7      	bhi.n	80014f8 <HAL_Delay+0x28>
  {
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4906      	ldr	r1, [pc, #24]	; (80015b0 <__NVIC_EnableIRQ+0x34>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f7ff ff90 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff2d 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff42 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff90 	bl	8001608 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5f 	bl	80015b4 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff35 	bl	800157c <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa2 	bl	800166c <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001744:	2b02      	cmp	r3, #2
 8001746:	d008      	beq.n	800175a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2204      	movs	r2, #4
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e020      	b.n	800179c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 020e 	bic.w	r2, r2, #14
 8001768:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0201 	bic.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d005      	beq.n	80017ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2204      	movs	r2, #4
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e051      	b.n	800186e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020e 	bic.w	r2, r2, #14
 80017d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_DMA_Abort_IT+0xd0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d029      	beq.n	8001848 <HAL_DMA_Abort_IT+0xa0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a20      	ldr	r2, [pc, #128]	; (800187c <HAL_DMA_Abort_IT+0xd4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d022      	beq.n	8001844 <HAL_DMA_Abort_IT+0x9c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_DMA_Abort_IT+0xd8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d01a      	beq.n	800183e <HAL_DMA_Abort_IT+0x96>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_DMA_Abort_IT+0xdc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d012      	beq.n	8001838 <HAL_DMA_Abort_IT+0x90>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_DMA_Abort_IT+0xe0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00a      	beq.n	8001832 <HAL_DMA_Abort_IT+0x8a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <HAL_DMA_Abort_IT+0xe4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d102      	bne.n	800182c <HAL_DMA_Abort_IT+0x84>
 8001826:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800182a:	e00e      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 800182c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001830:	e00b      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001836:	e008      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	e005      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	e002      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001844:	2310      	movs	r3, #16
 8001846:	e000      	b.n	800184a <HAL_DMA_Abort_IT+0xa2>
 8001848:	2301      	movs	r3, #1
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_DMA_Abort_IT+0xe8>)
 800184c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
    } 
  }
  return status;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40020008 	.word	0x40020008
 800187c:	4002001c 	.word	0x4002001c
 8001880:	40020030 	.word	0x40020030
 8001884:	40020044 	.word	0x40020044
 8001888:	40020058 	.word	0x40020058
 800188c:	4002006c 	.word	0x4002006c
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e169      	b.n	8001b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a8:	2201      	movs	r2, #1
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8158 	bne.w	8001b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a9a      	ldr	r2, [pc, #616]	; (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d05e      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018d0:	4a98      	ldr	r2, [pc, #608]	; (8001b34 <HAL_GPIO_Init+0x2a0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d875      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018d6:	4a98      	ldr	r2, [pc, #608]	; (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d058      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018dc:	4a96      	ldr	r2, [pc, #600]	; (8001b38 <HAL_GPIO_Init+0x2a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d86f      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018e2:	4a96      	ldr	r2, [pc, #600]	; (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d052      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018e8:	4a94      	ldr	r2, [pc, #592]	; (8001b3c <HAL_GPIO_Init+0x2a8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d869      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018ee:	4a94      	ldr	r2, [pc, #592]	; (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d04c      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 80018f4:	4a92      	ldr	r2, [pc, #584]	; (8001b40 <HAL_GPIO_Init+0x2ac>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d863      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 80018fa:	4a92      	ldr	r2, [pc, #584]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d046      	beq.n	800198e <HAL_GPIO_Init+0xfa>
 8001900:	4a90      	ldr	r2, [pc, #576]	; (8001b44 <HAL_GPIO_Init+0x2b0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d85d      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d82a      	bhi.n	8001960 <HAL_GPIO_Init+0xcc>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d859      	bhi.n	80019c2 <HAL_GPIO_Init+0x12e>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <HAL_GPIO_Init+0x80>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	0800198f 	.word	0x0800198f
 8001918:	08001969 	.word	0x08001969
 800191c:	0800197b 	.word	0x0800197b
 8001920:	080019bd 	.word	0x080019bd
 8001924:	080019c3 	.word	0x080019c3
 8001928:	080019c3 	.word	0x080019c3
 800192c:	080019c3 	.word	0x080019c3
 8001930:	080019c3 	.word	0x080019c3
 8001934:	080019c3 	.word	0x080019c3
 8001938:	080019c3 	.word	0x080019c3
 800193c:	080019c3 	.word	0x080019c3
 8001940:	080019c3 	.word	0x080019c3
 8001944:	080019c3 	.word	0x080019c3
 8001948:	080019c3 	.word	0x080019c3
 800194c:	080019c3 	.word	0x080019c3
 8001950:	080019c3 	.word	0x080019c3
 8001954:	080019c3 	.word	0x080019c3
 8001958:	08001971 	.word	0x08001971
 800195c:	08001985 	.word	0x08001985
 8001960:	4a79      	ldr	r2, [pc, #484]	; (8001b48 <HAL_GPIO_Init+0x2b4>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001966:	e02c      	b.n	80019c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e029      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e024      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	3308      	adds	r3, #8
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e01f      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	330c      	adds	r3, #12
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e01a      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001996:	2304      	movs	r3, #4
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e013      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	611a      	str	r2, [r3, #16]
          break;
 80019ae:	e009      	b.n	80019c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b0:	2308      	movs	r3, #8
 80019b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	615a      	str	r2, [r3, #20]
          break;
 80019ba:	e003      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x130>
          break;
 80019c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d801      	bhi.n	80019ce <HAL_GPIO_Init+0x13a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	e001      	b.n	80019d2 <HAL_GPIO_Init+0x13e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3304      	adds	r3, #4
 80019d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d802      	bhi.n	80019e0 <HAL_GPIO_Init+0x14c>
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x152>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3b08      	subs	r3, #8
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	210f      	movs	r1, #15
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	401a      	ands	r2, r3
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	431a      	orrs	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80b1 	beq.w	8001b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x2b8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2c:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <HAL_GPIO_Init+0x2c0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3f      	ldr	r2, [pc, #252]	; (8001b58 <HAL_GPIO_Init+0x2c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	; (8001b5c <HAL_GPIO_Init+0x2c8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3d      	ldr	r2, [pc, #244]	; (8001b60 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1e0>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e004      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_Init+0x1ee>
 8001a80:	2300      	movs	r3, #0
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	4093      	lsls	r3, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a92:	492f      	ldr	r1, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x2bc>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d006      	beq.n	8001aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	492c      	ldr	r1, [pc, #176]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4928      	ldr	r1, [pc, #160]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4922      	ldr	r1, [pc, #136]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	491e      	ldr	r1, [pc, #120]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4918      	ldr	r1, [pc, #96]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4914      	ldr	r1, [pc, #80]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60cb      	str	r3, [r1, #12]
 8001b30:	e021      	b.n	8001b76 <HAL_GPIO_Init+0x2e2>
 8001b32:	bf00      	nop
 8001b34:	10320000 	.word	0x10320000
 8001b38:	10310000 	.word	0x10310000
 8001b3c:	10220000 	.word	0x10220000
 8001b40:	10210000 	.word	0x10210000
 8001b44:	10120000 	.word	0x10120000
 8001b48:	10110000 	.word	0x10110000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40010800 	.word	0x40010800
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40011400 	.word	0x40011400
 8001b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4909      	ldr	r1, [pc, #36]	; (8001b98 <HAL_GPIO_Init+0x304>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3301      	adds	r3, #1
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f ae8e 	bne.w	80018a8 <HAL_GPIO_Init+0x14>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	372c      	adds	r7, #44	; 0x2c
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001baa:	e09a      	b.n	8001ce2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bac:	2201      	movs	r2, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 808d 	beq.w	8001cdc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001bc2:	4a4e      	ldr	r2, [pc, #312]	; (8001cfc <HAL_GPIO_DeInit+0x160>)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4013      	ands	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <HAL_GPIO_DeInit+0x164>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_GPIO_DeInit+0x78>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a45      	ldr	r2, [pc, #276]	; (8001d04 <HAL_GPIO_DeInit+0x168>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_DeInit+0x74>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a44      	ldr	r2, [pc, #272]	; (8001d08 <HAL_GPIO_DeInit+0x16c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_DeInit+0x70>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_GPIO_DeInit+0x170>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_DeInit+0x6c>
 8001c04:	2303      	movs	r3, #3
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_DeInit+0x7a>
 8001c08:	2304      	movs	r3, #4
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_DeInit+0x7a>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_DeInit+0x7a>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_DeInit+0x7a>
 8001c14:	2300      	movs	r3, #0
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d132      	bne.n	8001c8c <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001c36:	4a31      	ldr	r2, [pc, #196]	; (8001cfc <HAL_GPIO_DeInit+0x160>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	43da      	mvns	r2, r3
 8001c46:	482d      	ldr	r0, [pc, #180]	; (8001cfc <HAL_GPIO_DeInit+0x160>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001c54:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	492c      	ldr	r1, [pc, #176]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4929      	ldr	r1, [pc, #164]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001c70:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4925      	ldr	r1, [pc, #148]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4922      	ldr	r1, [pc, #136]	; (8001d10 <HAL_GPIO_DeInit+0x174>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d801      	bhi.n	8001c96 <HAL_GPIO_DeInit+0xfa>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	e001      	b.n	8001c9a <HAL_GPIO_DeInit+0xfe>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2bff      	cmp	r3, #255	; 0xff
 8001ca0:	d802      	bhi.n	8001ca8 <HAL_GPIO_DeInit+0x10c>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_DeInit+0x112>
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	3b08      	subs	r3, #8
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	210f      	movs	r1, #15
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	2104      	movs	r1, #4
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f47f af5e 	bne.w	8001bac <HAL_GPIO_DeInit+0x10>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40010800 	.word	0x40010800
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40011400 	.word	0x40011400
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e272      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8087 	beq.w	8001e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d70:	4b8f      	ldr	r3, [pc, #572]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d112      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5e>
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d10b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d06c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x12c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d168      	bne.n	8001e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e24c      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x76>
 8001dac:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a7f      	ldr	r2, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e02e      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x98>
 8001dc2:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7a      	ldr	r2, [pc, #488]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a77      	ldr	r2, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0xbc>
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a71      	ldr	r2, [pc, #452]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6e      	ldr	r2, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001e00:	4b6b      	ldr	r3, [pc, #428]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6a      	ldr	r2, [pc, #424]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fb4c 	bl	80014bc <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fb48 	bl	80014bc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e200      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe4>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fb38 	bl	80014bc <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff fb34 	bl	80014bc <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1ec      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x10c>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d063      	beq.n	8001f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d116      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x176>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1c0      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4939      	ldr	r1, [pc, #228]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	e03a      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff faed 	bl	80014bc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fae9 	bl	80014bc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1a1      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4927      	ldr	r1, [pc, #156]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff facc 	bl	80014bc <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff fac8 	bl	80014bc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e180      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03a      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d019      	beq.n	8001f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff faac 	bl	80014bc <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff faa8 	bl	80014bc <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e160      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f000 fad8 	bl	800253c <RCC_Delay>
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fa92 	bl	80014bc <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9a:	e00f      	b.n	8001fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fa8e 	bl	80014bc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e146      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	42420000 	.word	0x42420000
 8001fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b92      	ldr	r3, [pc, #584]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e9      	bne.n	8001f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a6 	beq.w	8002122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10d      	bne.n	8002002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b88      	ldr	r3, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	61d3      	str	r3, [r2, #28]
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002002:	4b82      	ldr	r3, [pc, #520]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d118      	bne.n	8002040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7e      	ldr	r2, [pc, #504]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7ff fa4f 	bl	80014bc <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002022:	f7ff fa4b 	bl	80014bc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e103      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b75      	ldr	r3, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x312>
 8002048:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a6e      	ldr	r2, [pc, #440]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e02d      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x334>
 800205e:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a69      	ldr	r2, [pc, #420]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a66      	ldr	r2, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	e01c      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d10c      	bne.n	800209a <HAL_RCC_OscConfig+0x356>
 8002080:	4b61      	ldr	r3, [pc, #388]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a60      	ldr	r2, [pc, #384]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e00b      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 800209a:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6213      	str	r3, [r2, #32]
 80020a6:	4b58      	ldr	r3, [pc, #352]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a57      	ldr	r2, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d015      	beq.n	80020e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f9ff 	bl	80014bc <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff f9fb 	bl	80014bc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0b1      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ee      	beq.n	80020c2 <HAL_RCC_OscConfig+0x37e>
 80020e4:	e014      	b.n	8002110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7ff f9e9 	bl	80014bc <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7ff f9e5 	bl	80014bc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e09b      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ee      	bne.n	80020ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d105      	bne.n	8002122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8087 	beq.w	800223a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d061      	beq.n	80021fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d146      	bne.n	80021ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff f9b9 	bl	80014bc <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff f9b5 	bl	80014bc <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e06d      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d108      	bne.n	8002188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4921      	ldr	r1, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a19      	ldr	r1, [r3, #32]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	430b      	orrs	r3, r1
 800219a:	491b      	ldr	r1, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff f989 	bl	80014bc <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff f985 	bl	80014bc <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e03d      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x46a>
 80021cc:	e035      	b.n	800223a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f972 	bl	80014bc <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f96e 	bl	80014bc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e026      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x498>
 80021fa:	e01e      	b.n	800223a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e019      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
 8002210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x500>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0d0      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4965      	ldr	r1, [pc, #404]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a58      	ldr	r2, [pc, #352]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	494d      	ldr	r1, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d040      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d115      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e07f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e073      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06b      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4936      	ldr	r1, [pc, #216]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff f8c0 	bl	80014bc <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f8bc 	bl	80014bc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e053      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d210      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4922      	ldr	r1, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e032      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4916      	ldr	r1, [pc, #88]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d6:	f000 f821 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490a      	ldr	r1, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1cc>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f81e 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40021000 	.word	0x40021000
 8002410:	08004680 	.word	0x08004680
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b490      	push	{r4, r7}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002424:	1d3c      	adds	r4, r7, #4
 8002426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800242c:	f240 2301 	movw	r3, #513	; 0x201
 8002430:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x40>
 8002456:	2b08      	cmp	r3, #8
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x46>
 800245a:	e02b      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800245e:	623b      	str	r3, [r7, #32]
      break;
 8002460:	e02b      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	0c9b      	lsrs	r3, r3, #18
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3328      	adds	r3, #40	; 0x28
 800246c:	443b      	add	r3, r7
 800246e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002472:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0c5b      	lsrs	r3, r3, #17
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	3328      	adds	r3, #40	; 0x28
 800248a:	443b      	add	r3, r7
 800248c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002490:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002496:	fb03 f202 	mul.w	r2, r3, r2
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e004      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	623b      	str	r3, [r7, #32]
      break;
 80024b2:	e002      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024b6:	623b      	str	r3, [r7, #32]
      break;
 80024b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ba:	6a3b      	ldr	r3, [r7, #32]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc90      	pop	{r4, r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	08004670 	.word	0x08004670
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	003d0900 	.word	0x003d0900

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f0:	f7ff fff2 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08004690 	.word	0x08004690

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002518:	f7ff ffde 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0adb      	lsrs	r3, r3, #11
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4903      	ldr	r1, [pc, #12]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	08004690 	.word	0x08004690

0800253c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <RCC_Delay+0x34>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <RCC_Delay+0x38>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0a5b      	lsrs	r3, r3, #9
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002558:	bf00      	nop
  }
  while (Delay --);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	60fa      	str	r2, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <RCC_Delay+0x1c>
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	20000000 	.word	0x20000000
 8002574:	10624dd3 	.word	0x10624dd3

08002578 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e076      	b.n	8002678 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b00      	cmp	r3, #0
 8002590:	d108      	bne.n	80025a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259a:	d009      	beq.n	80025b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
 80025a2:	e005      	b.n	80025b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fd9e 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	ea42 0103 	orr.w	r1, r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	0c1a      	lsrs	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f002 0204 	and.w	r2, r2, #4
 8002656:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002666:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e01a      	b.n	80026c8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe fd78 	bl	80011a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_SPI_Transmit+0x22>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e126      	b.n	8002940 <HAL_SPI_Transmit+0x270>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026fa:	f7fe fedf 	bl	80014bc <HAL_GetTick>
 80026fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002710:	2302      	movs	r3, #2
 8002712:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002714:	e10b      	b.n	800292e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_SPI_Transmit+0x52>
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002726:	e102      	b.n	800292e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2203      	movs	r2, #3
 800272c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800276e:	d10f      	bne.n	8002790 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800278e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d007      	beq.n	80027ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b6:	d14b      	bne.n	8002850 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Transmit+0xf6>
 80027c0:	8afb      	ldrh	r3, [r7, #22]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d13e      	bne.n	8002844 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	881a      	ldrh	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	1c9a      	adds	r2, r3, #2
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027ea:	e02b      	b.n	8002844 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d112      	bne.n	8002820 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	881a      	ldrh	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	1c9a      	adds	r2, r3, #2
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	86da      	strh	r2, [r3, #54]	; 0x36
 800281e:	e011      	b.n	8002844 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002820:	f7fe fe4c 	bl	80014bc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d803      	bhi.n	8002838 <HAL_SPI_Transmit+0x168>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d102      	bne.n	800283e <HAL_SPI_Transmit+0x16e>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002842:	e074      	b.n	800292e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ce      	bne.n	80027ec <HAL_SPI_Transmit+0x11c>
 800284e:	e04c      	b.n	80028ea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_SPI_Transmit+0x18e>
 8002858:	8afb      	ldrh	r3, [r7, #22]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d140      	bne.n	80028e0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002884:	e02c      	b.n	80028e0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b02      	cmp	r3, #2
 8002892:	d113      	bne.n	80028bc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ba:	e011      	b.n	80028e0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028bc:	f7fe fdfe 	bl	80014bc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d803      	bhi.n	80028d4 <HAL_SPI_Transmit+0x204>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d102      	bne.n	80028da <HAL_SPI_Transmit+0x20a>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028de:	e026      	b.n	800292e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1cd      	bne.n	8002886 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fbb8 	bl	8003064 <SPI_EndRxTxTransaction>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	77fb      	strb	r3, [r7, #31]
 800292a:	e000      	b.n	800292e <HAL_SPI_Transmit+0x25e>
  }

error:
 800292c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800293e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002964:	d112      	bne.n	800298c <HAL_SPI_Receive+0x44>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10e      	bne.n	800298c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2204      	movs	r2, #4
 8002972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8f1 	bl	8002b6a <HAL_SPI_TransmitReceive>
 8002988:	4603      	mov	r3, r0
 800298a:	e0ea      	b.n	8002b62 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_SPI_Receive+0x52>
 8002996:	2302      	movs	r3, #2
 8002998:	e0e3      	b.n	8002b62 <HAL_SPI_Receive+0x21a>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a2:	f7fe fd8b 	bl	80014bc <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d002      	beq.n	80029ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
 80029b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029b8:	e0ca      	b.n	8002b50 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_SPI_Receive+0x7e>
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029ca:	e0c1      	b.n	8002b50 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2204      	movs	r2, #4
 80029d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a12:	d10f      	bne.n	8002a34 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d007      	beq.n	8002a52 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d162      	bne.n	8002b20 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a5a:	e02e      	b.n	8002aba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d115      	bne.n	8002a96 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f103 020c 	add.w	r2, r3, #12
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	7812      	ldrb	r2, [r2, #0]
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a94:	e011      	b.n	8002aba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a96:	f7fe fd11 	bl	80014bc <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d803      	bhi.n	8002aae <HAL_SPI_Receive+0x166>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_Receive+0x16c>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ab8:	e04a      	b.n	8002b50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1cb      	bne.n	8002a5c <HAL_SPI_Receive+0x114>
 8002ac4:	e031      	b.n	8002b2a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d113      	bne.n	8002afc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	b292      	uxth	r2, r2
 8002ae0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	1c9a      	adds	r2, r3, #2
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002afa:	e011      	b.n	8002b20 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002afc:	f7fe fcde 	bl	80014bc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d803      	bhi.n	8002b14 <HAL_SPI_Receive+0x1cc>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d102      	bne.n	8002b1a <HAL_SPI_Receive+0x1d2>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b1e:	e017      	b.n	8002b50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1cd      	bne.n	8002ac6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa46 	bl	8002fc0 <SPI_EndRxTransaction>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
 8002b4c:	e000      	b.n	8002b50 <HAL_SPI_Receive+0x208>
  }

error :
 8002b4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b08c      	sub	sp, #48	; 0x30
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x26>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e18a      	b.n	8002ea6 <HAL_SPI_TransmitReceive+0x33c>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b98:	f7fe fc90 	bl	80014bc <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d00f      	beq.n	8002bda <HAL_SPI_TransmitReceive+0x70>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc0:	d107      	bne.n	8002bd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <HAL_SPI_TransmitReceive+0x68>
 8002bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d003      	beq.n	8002bda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bd8:	e15b      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x82>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x82>
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bf2:	e14e      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d003      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2205      	movs	r2, #5
 8002c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	887a      	ldrh	r2, [r7, #2]
 8002c1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d007      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c64:	d178      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_TransmitReceive+0x10a>
 8002c6e:	8b7b      	ldrh	r3, [r7, #26]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d166      	bne.n	8002d42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c98:	e053      	b.n	8002d42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x176>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_SPI_TransmitReceive+0x176>
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d113      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	881a      	ldrh	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d119      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x1b8>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d014      	beq.n	8002d22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	b292      	uxth	r2, r2
 8002d04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d22:	f7fe fbcb 	bl	80014bc <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d807      	bhi.n	8002d42 <HAL_SPI_TransmitReceive+0x1d8>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d003      	beq.n	8002d42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d40:	e0a7      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1a6      	bne.n	8002c9a <HAL_SPI_TransmitReceive+0x130>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1a1      	bne.n	8002c9a <HAL_SPI_TransmitReceive+0x130>
 8002d56:	e07c      	b.n	8002e52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_SPI_TransmitReceive+0x1fc>
 8002d60:	8b7b      	ldrh	r3, [r7, #26]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d16b      	bne.n	8002e3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d8c:	e057      	b.n	8002e3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d11c      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x26c>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x26c>
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d114      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d119      	bne.n	8002e18 <HAL_SPI_TransmitReceive+0x2ae>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e14:	2301      	movs	r3, #1
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e18:	f7fe fb50 	bl	80014bc <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d803      	bhi.n	8002e30 <HAL_SPI_TransmitReceive+0x2c6>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d102      	bne.n	8002e36 <HAL_SPI_TransmitReceive+0x2cc>
 8002e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e3c:	e029      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1a2      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x224>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d19d      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f904 	bl	8003064 <SPI_EndRxTxTransaction>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e6e:	e010      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	e000      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3730      	adds	r7, #48	; 0x30
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ec0:	f7fe fafc 	bl	80014bc <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ed0:	f7fe faf4 	bl	80014bc <HAL_GetTick>
 8002ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ed6:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	0d1b      	lsrs	r3, r3, #20
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee6:	e054      	b.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d050      	beq.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ef0:	f7fe fae4 	bl	80014bc <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d902      	bls.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13d      	bne.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1e:	d111      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f28:	d004      	beq.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d107      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d10f      	bne.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e017      	b.n	8002fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d19b      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000000 	.word	0x20000000

08002fc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fd4:	d111      	bne.n	8002ffa <SPI_EndRxTransaction+0x3a>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fde:	d004      	beq.n	8002fea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d107      	bne.n	8002ffa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003002:	d117      	bne.n	8003034 <SPI_EndRxTransaction+0x74>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300c:	d112      	bne.n	8003034 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	2101      	movs	r1, #1
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff ff49 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01a      	beq.n	800305a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e013      	b.n	800305c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2200      	movs	r2, #0
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff ff36 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e000      	b.n	800305c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff ff18 	bl	8002eb0 <SPI_WaitFlagStateUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e000      	b.n	8003098 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e041      	b.n	8003136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe f888 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 faf4 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d001      	beq.n	8003158 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_TIM_Base_Start+0x88>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_TIM_Base_Start+0x48>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d009      	beq.n	8003188 <HAL_TIM_Base_Start+0x48>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_TIM_Base_Start+0x8c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_TIM_Base_Start+0x48>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <HAL_TIM_Base_Start+0x90>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d010      	beq.n	80031bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	e007      	b.n	80031bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800

080031d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e041      	b.n	800326a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f839 	bl	8003272 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f000 fa5a 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_TIM_PWM_Start+0x24>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	e022      	b.n	80032ee <HAL_TIM_PWM_Start+0x6a>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d109      	bne.n	80032c2 <HAL_TIM_PWM_Start+0x3e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e015      	b.n	80032ee <HAL_TIM_PWM_Start+0x6a>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d109      	bne.n	80032dc <HAL_TIM_PWM_Start+0x58>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e008      	b.n	80032ee <HAL_TIM_PWM_Start+0x6a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e05e      	b.n	80033b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_PWM_Start+0x82>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003304:	e013      	b.n	800332e <HAL_TIM_PWM_Start+0xaa>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d104      	bne.n	8003316 <HAL_TIM_PWM_Start+0x92>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	e00b      	b.n	800332e <HAL_TIM_PWM_Start+0xaa>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d104      	bne.n	8003326 <HAL_TIM_PWM_Start+0xa2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003324:	e003      	b.n	800332e <HAL_TIM_PWM_Start+0xaa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2201      	movs	r2, #1
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fc48 	bl	8003bcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_TIM_PWM_Start+0x138>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d107      	bne.n	8003356 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <HAL_TIM_PWM_Start+0x138>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIM_PWM_Start+0xfa>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d009      	beq.n	800337e <HAL_TIM_PWM_Start+0xfa>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a14      	ldr	r2, [pc, #80]	; (80033c0 <HAL_TIM_PWM_Start+0x13c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIM_PWM_Start+0xfa>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_TIM_PWM_Start+0x140>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b06      	cmp	r3, #6
 800338e:	d010      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	e007      	b.n	80033b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800

080033c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033de:	2302      	movs	r3, #2
 80033e0:	e0ac      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x174>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	f200 809f 	bhi.w	8003530 <HAL_TIM_PWM_ConfigChannel+0x168>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	0800342d 	.word	0x0800342d
 80033fc:	08003531 	.word	0x08003531
 8003400:	08003531 	.word	0x08003531
 8003404:	08003531 	.word	0x08003531
 8003408:	0800346d 	.word	0x0800346d
 800340c:	08003531 	.word	0x08003531
 8003410:	08003531 	.word	0x08003531
 8003414:	08003531 	.word	0x08003531
 8003418:	080034af 	.word	0x080034af
 800341c:	08003531 	.word	0x08003531
 8003420:	08003531 	.word	0x08003531
 8003424:	08003531 	.word	0x08003531
 8003428:	080034ef 	.word	0x080034ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f9ac 	bl	8003790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0208 	orr.w	r2, r2, #8
 8003446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0204 	bic.w	r2, r2, #4
 8003456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6999      	ldr	r1, [r3, #24]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	619a      	str	r2, [r3, #24]
      break;
 800346a:	e062      	b.n	8003532 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f9f2 	bl	800385c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6999      	ldr	r1, [r3, #24]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	021a      	lsls	r2, r3, #8
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
      break;
 80034ac:	e041      	b.n	8003532 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa3b 	bl	8003930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0208 	orr.w	r2, r2, #8
 80034c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0204 	bic.w	r2, r2, #4
 80034d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69d9      	ldr	r1, [r3, #28]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	61da      	str	r2, [r3, #28]
      break;
 80034ec:	e021      	b.n	8003532 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa85 	bl	8003a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69d9      	ldr	r1, [r3, #28]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	021a      	lsls	r2, r3, #8
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	61da      	str	r2, [r3, #28]
      break;
 800352e:	e000      	b.n	8003532 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003530:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIM_ConfigClockSource+0x18>
 8003558:	2302      	movs	r3, #2
 800355a:	e0b3      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x180>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003594:	d03e      	beq.n	8003614 <HAL_TIM_ConfigClockSource+0xd0>
 8003596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359a:	f200 8087 	bhi.w	80036ac <HAL_TIM_ConfigClockSource+0x168>
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	f000 8085 	beq.w	80036b0 <HAL_TIM_ConfigClockSource+0x16c>
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035aa:	d87f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d01a      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0xa2>
 80035b0:	2b70      	cmp	r3, #112	; 0x70
 80035b2:	d87b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d050      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x116>
 80035b8:	2b60      	cmp	r3, #96	; 0x60
 80035ba:	d877      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
 80035bc:	2b50      	cmp	r3, #80	; 0x50
 80035be:	d03c      	beq.n	800363a <HAL_TIM_ConfigClockSource+0xf6>
 80035c0:	2b50      	cmp	r3, #80	; 0x50
 80035c2:	d873      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d058      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x136>
 80035c8:	2b40      	cmp	r3, #64	; 0x40
 80035ca:	d86f      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
 80035cc:	2b30      	cmp	r3, #48	; 0x30
 80035ce:	d064      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x156>
 80035d0:	2b30      	cmp	r3, #48	; 0x30
 80035d2:	d86b      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d060      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x156>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d867      	bhi.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d05c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x156>
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d05a      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035e4:	e062      	b.n	80036ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6899      	ldr	r1, [r3, #8]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f000 faca 	bl	8003b8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003608:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	609a      	str	r2, [r3, #8]
      break;
 8003612:	e04e      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f000 fab3 	bl	8003b8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003636:	609a      	str	r2, [r3, #8]
      break;
 8003638:	e03b      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	461a      	mov	r2, r3
 8003648:	f000 fa2a 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2150      	movs	r1, #80	; 0x50
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa81 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003658:	e02b      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	461a      	mov	r2, r3
 8003668:	f000 fa48 	bl	8003afc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2160      	movs	r1, #96	; 0x60
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa71 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003678:	e01b      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	461a      	mov	r2, r3
 8003688:	f000 fa0a 	bl	8003aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2140      	movs	r1, #64	; 0x40
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa61 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003698:	e00b      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	4610      	mov	r0, r2
 80036a6:	f000 fa58 	bl	8003b5a <TIM_ITRx_SetConfig>
        break;
 80036aa:	e002      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036ac:	bf00      	nop
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a29      	ldr	r2, [pc, #164]	; (8003784 <TIM_Base_SetConfig+0xb8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_Base_SetConfig+0x30>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d007      	beq.n	80036fc <TIM_Base_SetConfig+0x30>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a26      	ldr	r2, [pc, #152]	; (8003788 <TIM_Base_SetConfig+0xbc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x30>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a25      	ldr	r2, [pc, #148]	; (800378c <TIM_Base_SetConfig+0xc0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <TIM_Base_SetConfig+0xb8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_Base_SetConfig+0x62>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d007      	beq.n	800372e <TIM_Base_SetConfig+0x62>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a19      	ldr	r2, [pc, #100]	; (8003788 <TIM_Base_SetConfig+0xbc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <TIM_Base_SetConfig+0xc0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a07      	ldr	r2, [pc, #28]	; (8003784 <TIM_Base_SetConfig+0xb8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	615a      	str	r2, [r3, #20]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800

08003790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0201 	bic.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 0302 	bic.w	r3, r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <TIM_OC1_SetConfig+0xc8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d10c      	bne.n	8003806 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0308 	bic.w	r3, r3, #8
 80037f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a13      	ldr	r2, [pc, #76]	; (8003858 <TIM_OC1_SetConfig+0xc8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d111      	bne.n	8003832 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	621a      	str	r2, [r3, #32]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00

0800385c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f023 0210 	bic.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0320 	bic.w	r3, r3, #32
 80038a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a1d      	ldr	r2, [pc, #116]	; (800392c <TIM_OC2_SetConfig+0xd0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d10d      	bne.n	80038d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a14      	ldr	r2, [pc, #80]	; (800392c <TIM_OC2_SetConfig+0xd0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d113      	bne.n	8003908 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	40012c00 	.word	0x40012c00

08003930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0303 	bic.w	r3, r3, #3
 8003966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <TIM_OC3_SetConfig+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10d      	bne.n	80039aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <TIM_OC3_SetConfig+0xd0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d113      	bne.n	80039da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00

08003a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	021b      	lsls	r3, r3, #8
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	031b      	lsls	r3, r3, #12
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <TIM_OC4_SetConfig+0x98>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d109      	bne.n	8003a78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	40012c00 	.word	0x40012c00

08003aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0201 	bic.w	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 030a 	bic.w	r3, r3, #10
 8003adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 0210 	bic.w	r2, r3, #16
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	031b      	lsls	r3, r3, #12
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f043 0307 	orr.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	609a      	str	r2, [r3, #8]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2201      	movs	r2, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1a      	ldr	r2, [r3, #32]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e046      	b.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d009      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800

08003cd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e03f      	b.n	8003d62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd fad6 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	; 0x24
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fbe5 	bl	80044e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d130      	bne.n	8003de6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_UART_Transmit_IT+0x26>
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e029      	b.n	8003de8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_UART_Transmit_IT+0x38>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e022      	b.n	8003de8 <HAL_UART_Transmit_IT+0x7e>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2221      	movs	r2, #33	; 0x21
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d11d      	bne.n	8003e48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_UART_Receive_IT+0x26>
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e016      	b.n	8003e4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_UART_Receive_IT+0x38>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_Receive_IT+0x58>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f9c6 	bl	80041d0 <UART_Start_Receive_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	e000      	b.n	8003e4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10d      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x52>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa76 	bl	8004390 <UART_Receive_IT>
      return;
 8003ea4:	e17b      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80b1 	beq.w	8004010 <HAL_UART_IRQHandler+0x1bc>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x70>
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80a6 	beq.w	8004010 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x90>
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_UART_IRQHandler+0xb0>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f043 0202 	orr.w	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_UART_IRQHandler+0xd0>
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f043 0204 	orr.w	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00f      	beq.n	8003f4e <HAL_UART_IRQHandler+0xfa>
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d104      	bne.n	8003f42 <HAL_UART_IRQHandler+0xee>
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f043 0208 	orr.w	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 811e 	beq.w	8004194 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_UART_IRQHandler+0x11e>
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa0f 	bl	8004390 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_UART_IRQHandler+0x146>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d031      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f951 	bl	8004242 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d023      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fbc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d013      	beq.n	8003fee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	4a76      	ldr	r2, [pc, #472]	; (80041a4 <HAL_UART_IRQHandler+0x350>)
 8003fcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fd fbe8 	bl	80017a8 <HAL_DMA_Abort_IT>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	e00e      	b.n	800400c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8da 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	e00a      	b.n	800400c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8d6 	bl	80041a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	e006      	b.n	800400c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8d2 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800400a:	e0c3      	b.n	8004194 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	bf00      	nop
    return;
 800400e:	e0c1      	b.n	8004194 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 80a1 	bne.w	800415c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 809b 	beq.w	800415c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 8095 	beq.w	800415c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d04e      	beq.n	80040f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004060:	8a3b      	ldrh	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8098 	beq.w	8004198 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800406c:	8a3a      	ldrh	r2, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	f080 8092 	bcs.w	8004198 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8a3a      	ldrh	r2, [r7, #16]
 8004078:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b20      	cmp	r3, #32
 8004082:	d02b      	beq.n	80040dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004092:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0210 	bic.w	r2, r2, #16
 80040d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd fb2b 	bl	8001732 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f864 	bl	80041ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040f2:	e051      	b.n	8004198 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d047      	beq.n	800419c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800410c:	8a7b      	ldrh	r3, [r7, #18]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d044      	beq.n	800419c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004120:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0210 	bic.w	r2, r2, #16
 800414e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004150:	8a7b      	ldrh	r3, [r7, #18]
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f830 	bl	80041ba <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800415a:	e01f      	b.n	800419c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_UART_IRQHandler+0x324>
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8a6 	bl	80042c2 <UART_Transmit_IT>
    return;
 8004176:	e012      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <HAL_UART_IRQHandler+0x34a>
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f8e7 	bl	8004360 <UART_EndTransmit_IT>
    return;
 8004192:	e004      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
    return;
 8004194:	bf00      	nop
 8004196:	e002      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
      return;
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <HAL_UART_IRQHandler+0x34a>
      return;
 800419c:	bf00      	nop
  }
}
 800419e:	3728      	adds	r7, #40	; 0x28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	0800429b 	.word	0x0800429b

080041a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2222      	movs	r2, #34	; 0x22
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004214:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0220 	orr.w	r2, r2, #32
 8004234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004258:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	2b01      	cmp	r3, #1
 8004270:	d107      	bne.n	8004282 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0210 	bic.w	r2, r2, #16
 8004280:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff ff77 	bl	80041a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b21      	cmp	r3, #33	; 0x21
 80042d4:	d13e      	bne.n	8004354 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d114      	bne.n	800430a <UART_Transmit_IT+0x48>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d110      	bne.n	800430a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	1c9a      	adds	r2, r3, #2
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]
 8004308:	e008      	b.n	800431c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6211      	str	r1, [r2, #32]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29b      	uxth	r3, r3
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4619      	mov	r1, r3
 800432a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10f      	bne.n	8004350 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800433e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004376:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fc f9f7 	bl	8000774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b22      	cmp	r3, #34	; 0x22
 80043a2:	f040 8099 	bne.w	80044d8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ae:	d117      	bne.n	80043e0 <UART_Receive_IT+0x50>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d113      	bne.n	80043e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	629a      	str	r2, [r3, #40]	; 0x28
 80043de:	e026      	b.n	800442e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d007      	beq.n	8004404 <UART_Receive_IT+0x74>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <UART_Receive_IT+0x82>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e008      	b.n	8004424 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441e:	b2da      	uxtb	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4619      	mov	r1, r3
 800443c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800443e:	2b00      	cmp	r3, #0
 8004440:	d148      	bne.n	80044d4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0220 	bic.w	r2, r2, #32
 8004450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	2b01      	cmp	r3, #1
 8004480:	d123      	bne.n	80044ca <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0210 	bic.w	r2, r2, #16
 8004496:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d10a      	bne.n	80044bc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044c0:	4619      	mov	r1, r3
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fe79 	bl	80041ba <HAL_UARTEx_RxEventCallback>
 80044c8:	e002      	b.n	80044d0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc f926 	bl	800071c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e002      	b.n	80044da <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800451e:	f023 030c 	bic.w	r3, r3, #12
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	430b      	orrs	r3, r1
 800452a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a2c      	ldr	r2, [pc, #176]	; (80045f8 <UART_SetConfig+0x114>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d103      	bne.n	8004554 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800454c:	f7fd ffe2 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	e002      	b.n	800455a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fd ffca 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8004558:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <UART_SetConfig+0x118>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	0119      	lsls	r1, r3, #4
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009a      	lsls	r2, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <UART_SetConfig+0x118>)
 8004592:	fba3 0302 	umull	r0, r3, r3, r2
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2064      	movs	r0, #100	; 0x64
 800459a:	fb00 f303 	mul.w	r3, r0, r3
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	3332      	adds	r3, #50	; 0x32
 80045a4:	4a15      	ldr	r2, [pc, #84]	; (80045fc <UART_SetConfig+0x118>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b0:	4419      	add	r1, r3
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009a      	lsls	r2, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <UART_SetConfig+0x118>)
 80045ca:	fba3 0302 	umull	r0, r3, r3, r2
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2064      	movs	r0, #100	; 0x64
 80045d2:	fb00 f303 	mul.w	r3, r0, r3
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	3332      	adds	r3, #50	; 0x32
 80045dc:	4a07      	ldr	r2, [pc, #28]	; (80045fc <UART_SetConfig+0x118>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	f003 020f 	and.w	r2, r3, #15
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	440a      	add	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40013800 	.word	0x40013800
 80045fc:	51eb851f 	.word	0x51eb851f

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	2600      	movs	r6, #0
 8004604:	4d0c      	ldr	r5, [pc, #48]	; (8004638 <__libc_init_array+0x38>)
 8004606:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004608:	1b64      	subs	r4, r4, r5
 800460a:	10a4      	asrs	r4, r4, #2
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	f000 f822 	bl	8004658 <_init>
 8004614:	2600      	movs	r6, #0
 8004616:	4d0a      	ldr	r5, [pc, #40]	; (8004640 <__libc_init_array+0x40>)
 8004618:	4c0a      	ldr	r4, [pc, #40]	; (8004644 <__libc_init_array+0x44>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08004698 	.word	0x08004698
 800463c:	08004698 	.word	0x08004698
 8004640:	08004698 	.word	0x08004698
 8004644:	0800469c 	.word	0x0800469c

08004648 <memset>:
 8004648:	4603      	mov	r3, r0
 800464a:	4402      	add	r2, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
